#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Function to calculate the modular inverse of a number
int modInverse(int a, int m) 
{ 
    int m0 = m; 
    int y = 0, x = 1; 
  
    if (m == 1) 
      return 0; 
  
    while (a > 1) 
    { 
        // q is quotient 
        int q = a / m;
        int t = m; 
  
        // m is remainder now, process same as 
        // Euclid's algo
        m = a % m; a = t; 
        t = y; 
  
        // Update y and x 
        y = x - q * y; 
        x = t; 
    } 
  
    // Make x positive 
    if (x < 0) 
       x += m0; 
  
    return x; 
} 

int main()
{
    char ciphertext[] = "BUHXCXJXSXSXCXVXIXHXEXRXGEX";
    int len = strlen(ciphertext);
  
    // mapping of characters in ciphertext
    int freq[26] = {0};
  
    // count frequency of each character 
    for (int i = 0; i < len; i++) 
        freq[ciphertext[i] - 'A']++; 
  
    // calculate the most frequent character
    int max1 = 0, max2 = 0;
    for (int i = 0; i < 26; i++) 
    { 
        if (freq[i] > freq[max1]) 
        { 
            max2 = max1; 
            max1 = i; 
        } 
        else if (freq[i] > freq[max2] && freq[i] != freq[max1]) 
            max2 = i; 
    } 
  
    // calculate a and b for the equation
    int a = (max1 - max2 + 26) % 26;
    int b = (max2 - (a * 'B' - 'U' + 26) % 26 + 26) % 26;
  
    // calculate modular inverse of a
    int a_inv = modInverse(a, 26);
  
    // decrypt the ciphertext
    for (int i = 0; i < len; i++)
    {
        int x = ciphertext[i] - 'A';
        x = (a_inv * (x - b) % 26 + 26) % 26;
        printf("%c", x + 'A');
    }
    printf("\n");
  
    return 0;
}
